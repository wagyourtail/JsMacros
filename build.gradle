plugins {
	id 'java'
	id 'dev.architectury.loom' version '0.8.0-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group + ".FORGE-" + project.minecraft_version.replaceAll("\\.", "_")

repositories {
    mavenCentral()
    maven {
        name "Modmuss50 Repository"
        url 'https://maven.fabricmc.net/'
    }
    maven { url 'https://jitpack.io' }
}

minecraft {
}

loom {
	mixinConfig "jsmacros.mixins.json"
}

dependencies {
	forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	implementation "org.graalvm.sdk:graal-sdk:${project.graal_version}"
	implementation "org.graalvm.js:js:${project.graal_version}"
	implementation "org.graalvm.truffle:truffle-api:${project.graal_version}"
	implementation "org.graalvm.regex:regex:${project.graal_version}"
	implementation group: 'com.ibm.icu', name: 'icu4j', version: '67.1'

	include "org.graalvm.sdk:graal-sdk:${project.graal_version}"
	include "org.graalvm.js:js:${project.graal_version}"
	include "org.graalvm.truffle:truffle-api:${project.graal_version}"
	include "org.graalvm.regex:regex:${project.graal_version}"
	include group: 'com.ibm.icu', name: 'icu4j', version: '67.1'

    implementation "io.noties:prism4j:${project.prism_version}"
    include "io.noties:prism4j:${project.prism_version}"

    implementation "com.neovisionaries:nv-websocket-client:2.10"
    include "com.neovisionaries:nv-websocket-client:2.10"
	
	//nullable not defined so...
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

processResources {
	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
	inputs.property "META-INF/mods.toml", project.version
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"

	//TODO: remove in 1.17?
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = targetVersion
	}
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
	manifest {
		attributes([
				'MixinConnector': 'xyz.wagyourtail.jsmacros.client.JsMacrosEarlyRiser',
				'JsMacrosDeps': configurations.include.files.collect { it.name }.join(" ")
		])
	}
}

javadoc {
	options.tags = [ "@custom.replaceParams" ]
	source = sourceSets.main.allJava
	classpath = sourceSets.main.compileClasspath
	destinationDir = new File(project.buildDir, "docs/docs")
	options {
		links 'https://docs.oracle.com/javase/8/docs/api/'
	}
}

task generateTSDoc(type: Javadoc) {
	source = sourceSets.main.allJava
	classpath = sourceSets.main.compileClasspath
	destinationDir = new File(project.buildDir, "docs/typescript/headers/")
	options.doclet = "xyz.wagyourtail.doclet.tsdoclet.Main"
	options.docletpath new File(project.rootDir, "buildSrc/build/libs/buildSrc.jar")
	options.addStringOption "v", version
}

task copyTSEnv(type: Copy, dependsOn: generateTSDoc) {
	from new File(project.rootDir, "graalts")
	into new File(project.buildDir, "docs/typescript")
}

task generateWebDoc(type: Javadoc) {
	source = sourceSets.main.allJava
	classpath = sourceSets.main.compileClasspath
	destinationDir = new File(project.buildDir, "docs/web/")
	options.doclet = "xyz.wagyourtail.doclet.webdoclet.Main"
	options.docletpath new File(project.rootDir, "buildSrc/build/libs/buildSrc.jar")
	options.addStringOption "v", version
	options.addStringOption "mcv", project.minecraft_version
	options {
		links 'https://docs.oracle.com/javase/8/docs/api/'
	}
}

task copyWebDoc(type: Copy, dependsOn: generateWebDoc) {
	from new File(project.rootDir, "webdoc")
	into new File(project.buildDir, "docs/web")
}

task createDist(type: Copy, dependsOn: copyWebDoc) {
	from(new File(project.buildDir, "docs"), new File(project.buildDir, "libs"))
	into new File(project.rootDir, "dist")
}

generateWebDoc.dependsOn(copyTSEnv)
build.finalizedBy(createDist)

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}